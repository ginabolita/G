
//--------------------------------------------------------
// LIGHTING
//--------------------------------------------------------
uniform vec4 lightAmbient;
uniform vec4 lightDiffuse;
uniform vec4 lightSpecular;
uniform vec4 lightPosition;
uniform vec4 matAmbient;
uniform vec4 matDiffuse;
uniform vec4 matSpecular;
uniform float matShininess;

vec4 Phong(vec3 N, vec3 L, vec3 V) {
  L = normalize(L);
  vec4 Ambient = matAmbient * lightAmbient;

  float NdotL = max(0., dot(N, L));
  vec4 Diff = matDiffuse * lightDiffuse * NdotL;

  vec3 R = normalize(2 * dot(N, L) * N - L);
  float RdotV = max(0., dot(R, V));
  float lspec = (NdotL > 0.0) ? pow(RdotV, matShininess) : 0.0;
  vec4 Spec = matSpecular * lightSpecular * lspec;

  return Ambient + Diff + Spec;
}
// vs
vN = normalize(normalMatrix * normal);
vP = (modelViewMatrix * vec4(vertex, 1.0)).xyz;
// fs
vec3 N = normalize(N);
vec3 V = -normalize(vP);
vec3 L = lightPosition.xyz - vP;
vec4 lighting = frontColor * Phong(vN, L, V);
//--------------------------------------------------------
// UNIFORMS
//--------------------------------------------------------
uniform vec3 boundingBoxMin;
uniform vec3 boundingBoxMax;
uniform vec2 mousePosition;  // pos del cursor (window space); origen BL
uniform float time;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelMatrixInverse;
uniform mat4 viewMatrixInverse;
uniform mat4 projectionMatrixInverse;
uniform mat4 modelViewMatrixInverse;
uniform mat4 modelViewProjectionMatrixInverse;
uniform mat3 normalMatrix;

//--------------------------------------------------------
// MSC
//--------------------------------------------------------
gl_FragDepth = 1 - gl_FragCoord.z;
Vclip.z = -Vclip.z;
// Prefer `mix()` over `if` for simple conditions:
float value = mix(a, b, step(threshold, x));

PI 3.1415926538;
//--------------------------------------------------------
// MATRIUS
//--------------------------------------------------------
// Correct order: Scale → Rotate → Translate
mat4 modelMatrix = translateMatrix * rotateY * rotateX * scaleMatrix;

mat4 translateMatrix = mat4(1.0, 0.0, 0.0, tx, 0.0, 1.0, 0.0, ty, 0.0, 0.0, 1.0,
                            tz, 0.0, 0.0, 0.0, 1.0);

mat4 scaleMatriX4 = mat4(sx, 0.0, 0.0, 0.0, 0.0, sy, 0.0, 0.0, 0.0, 0.0, sz,
                         0.0, 0.0, 0.0, 0.0, 1.0);
mat3 scaleMatriX3 = mat3(sx, 0.0, 0.0, 0.0, sy, 0.0, 0.0, 0.0, sz);

mat4 rotateX4 = mat4(1.0, 0.0, 0.0, 0.0, 0.0, cos(angle), sin(angle), 0.0, 0.0,
                     -sin(angle), cos(angle), 0.0, 0.0, 0.0, 0.0, 1.0);

mat3 rotateX3 = mat3(1.0, 0.0, 0.0, 0.0, cos(angle), sin(angle), 0.0,
                     -sin(angle), cos(angle));

mat4 rotateY4 = mat4(cos(angle), 0.0, -sin(angle), 0.0, 0.0, 1.0, 0.0, 0.0,
                     sin(angle), 0.0, cos(angle), 0.0, 0.0, 0.0, 0.0, 1.0);

mat3 rotateY3 = mat3(cos(angle), 0.0, sin(angle), 0.0, 1.0, 0.0, -sin(angle),
                     0.0, cos(angle));

mat4 rotateZ4 = mat4(cos(angle), -sin(angle), 0.0, 0.0, sin(angle), cos(angle),
                     0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);

mat3 rotateZ3 = mat3(cos(angle), -sin(angle), 0.0, sin(angle), cos(angle), 0.0,
                     0.0, 0.0, 1.0);

//--------------------------------------------------------
// DE OBJ SPACE A NDC
//--------------------------------------------------------
vec4 clipPos = modelViewProjectionMatrix * vec4(noutvertex, 1.0);
vec3 ndc = clipPos.xyz / clipPos.w;
vec2 screenPos = (ndc.xy + 1.0) * 0.5 * viewportSize;

//---------------------------------------------------------
// cambiar rango
//--------
scale form[a, b] to[c, d] coordinates scaled = c + (x - a) * (d - c) / (b - a);
//--------------------------------------------------------
//  EXPLOSION
//--------------------------------------------------------
int frame = int(floor(time * 30));
float slice = frame * 30;
vec2 texC = vtexCoord * scale;

int dfdx = int(texC.s) % scale;
int dfdy = int(texC.t) % scale;

float s;
float t;

if (dfdy == scale - 2 && dfdx != 0 && dfdx != scale - 1) {
  s = texC.s * 1 / 4. + 0 * 1 / 4. - dfdx * 1 / 4.;
  t = texC.t * 1 / 4. + 0 * 1 / 4. - dfdy * 1 / 4.;
}
vec4 color2 = texture(explosion, vec2(s, t));
fragColor = mix(color, color2.rgb, color2.a);

// mix de texturas
vec2 position = 2.0 * (uv - Min) / (Max - Min) - vec2(1.0);
vec2 scaledCoord = (vertex.xy + 1.0) * 0.496 + 0.004;  //[0.04, 0.996]
float f = texture(noise0, vtexCoord).x;
vec4 frontColor = texture(grass2, vtexCoord);
if (f < 1)
  frontColor =
      mix(texture(rock1, vtexCoord), texture(grass2, vtexCoord), fract(f));
fragColor = frontColor;

// displacement mapping
float h = texture(heightMap, vtexCoord).r;
float dhds = texture(heightMap, vtexCoord + vec2(epsilon, 0.0)).r - h;
float dhdt = texture(heightMap, vtexCoord + vec2(0.0, epsilon)).r - h;
vec2 G = vec2(dhds / epsilon, dhdt / epsilon);
vec3 normal = normalize(vec3(-G.x, -G.y, smoothness));

// forma elipse
float a = 0.13;
float b = 0.2;
float elipse1 =
    (uvEye1.x * uvEye1.x) / (a * a) + (uvEye1.y * uvEye1.y) / (b * b);
float eye = 1.0 - step(1.0, elipse1);

// funcion sinusoidal
float v = A * sin(2 * pi * f * time + phi);